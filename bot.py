import sqlite3
import random
from datetime import datetime, timedelta
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from sklearn.linear_model import LinearRegression
import numpy as np

TOKEN = "YOUR_BOT_TOKEN"  # –¢–≤–æ–π —Ç–æ–∫–µ–Ω
ADMIN_CHAT_IDS = ["ADMIN_CHAT_ID1", "ADMIN_CHAT_ID2"]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('orders.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
cursor.execute("""
CREATE TABLE IF NOT EXISTS orders (
    date TEXT,
    dessert TEXT,
    quantity INTEGER
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS desserts (
    name TEXT UNIQUE
)
""")
conn.commit()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –¥–µ—Å–µ—Ä—Ç–æ–≤ –∏ –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üßÅ –ö–∞–ø–∫–µ–π–∫–∏"), KeyboardButton(text="üç∞ –¢–æ—Ä—Ç—ã")],
        [KeyboardButton(text="üç™ –ü–µ—á–µ–Ω—å–µ"), KeyboardButton(text="ü•ê –ö—Ä—É–∞—Å—Å–∞–Ω—ã")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
back_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
sales_stats_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º", callback_data="sales_by_date")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ—Å–µ—Ä—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_dessert(name):
    cursor.execute("INSERT OR IGNORE INTO desserts (name) VALUES (?)", (name,))
    conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_order(date, dessert, quantity):
    cursor.execute("INSERT INTO orders (date, dessert, quantity) VALUES (?, ?, ?)", (date, dessert, quantity))
    conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
def get_orders_for_date(date):
    cursor.execute("SELECT dessert, quantity FROM orders WHERE date=?", (date,))
    return cursor.fetchall()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –ø–æ –¥–∞—Ç–∞–º
def get_sales_by_date():
    cursor.execute("SELECT date, dessert, SUM(quantity) FROM orders GROUP BY date, dessert ORDER BY date DESC")
    return cursor.fetchall()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
async def send_sales_stats(message: types.Message):
    sales = get_sales_by_date()
    if not sales:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö. üìâ")
    else:
        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º:\n"
        for sale in sales:
            response += f"{sale[0]} - {sale[1]}: {sale[2]} –ø–æ—Ä—Ü–∏–π\n"
        await message.answer(response, reply_markup=back_button)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
def predict_order_with_explanation():
    cursor.execute("SELECT date, dessert, quantity FROM orders")
    orders = cursor.fetchall()
    
    cursor.execute("SELECT name FROM desserts")
    desserts = [row[0] for row in cursor.fetchall()]
    
    data = {dessert: [] for dessert in desserts}
    
    for order in orders:
        date_str, dessert, quantity = order
        date = datetime.strptime(date_str, '%Y-%m-%d')
        data[dessert].append((date, quantity))
    
    predictions = {}
    explanations = {}
    for dessert, orders in data.items():
        if len(orders) < 2:
            predictions[dessert] = random.randint(5, 15)
            explanations[dessert] = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –ø—Ä–æ–≥–Ω–æ–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö."
            continue
        
        X = np.array([[(order[0] - min([o[0] for o in orders])).days] for order in orders]).reshape(-1, 1)
        y = np.array([order[1] for order in orders])
        
        model = LinearRegression()
        model.fit(X, y)
        
        next_day = (max([o[0] for o in orders]) + timedelta(days=1))
        X_new = np.array([[next_day.days - min([o[0] for o in orders]).days]])
        predicted_quantity = model.predict(X_new)
        predictions[dessert] = max(0, int(predicted_quantity[0]) + random.randint(0, 2))
        
        explanation = f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–µ–≥—Ä–µ—Å—Å–∏–∏: {model.coef_[0]:.2f}, " \
                      f"–ø–µ—Ä–µ—Ö–≤–∞—Ç: {model.intercept_:.2f}. –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {predictions[dessert]} –ø–æ—Ä—Ü–∏–π."
        explanations[dessert] = explanation
    
    return predictions, explanations

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
@dp.message(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–π –±–æ—Ç! üç∞ "
        "–ú—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º –∑–∞–∫–∞–∑–∞—Ç—å –≤–∫—É—Å–Ω–µ–π—à–∏–µ –¥–µ—Å–µ—Ä—Ç—ã! üòã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è:",
        reply_markup=menu_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ—Å–µ—Ä—Ç–∞
@dp.message()
async def choose_dessert(message: types.Message):
    dessert = message.text
    if dessert not in ["üßÅ –ö–∞–ø–∫–µ–π–∫–∏", "üç∞ –¢–æ—Ä—Ç—ã", "üç™ –ü–µ—á–µ–Ω—å–µ", "ü•ê –ö—Ä—É–∞—Å—Å–∞–Ω—ã"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ—Å–µ—Ä—Ç–æ–≤:", reply_markup=menu_keyboard)
        return

    quantity_keyboard = InlineKeyboardMarkup(row_width=5)
    for i in range(1, 11):
        quantity_keyboard.add(InlineKeyboardButton(text=str(i), callback_data=f"quantity_{i}_{dessert}"))
    
    await message.answer(f"–°–∫–æ–ª—å–∫–æ –ø–æ—Ä—Ü–∏–π {dessert} –≤–∞–º –Ω—É–∂–Ω–æ? –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=quantity_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message(commands=["sales_stats"])
async def sales_stats_command(message: types.Message):
    if str(message.chat.id) in ADMIN_CHAT_IDS:
        await send_sales_stats(message)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ü–∏–π
@dp.callback_query()
async def choose_quantity(call: types.CallbackQuery):
    data = call.data.split("_")
    quantity = int(data[1])
    dessert = data[2]
    
    add_dessert(dessert)
    add_order(datetime.now().strftime('%Y-%m-%d'), dessert, quantity)
    
    await call.answer(f"‚úÖ –í—ã –∑–∞–∫–∞–∑–∞–ª–∏ {quantity} –ø–æ—Ä—Ü–∏–π {dessert}. –°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –≤–∞—à –∑–∞–∫–∞–∑!")
    await send_sales_stats(call.message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" (–¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤)
@dp.callback_query()
async def go_back(call: types.CallbackQuery):
    if call.data == "back_to_main":
        await call.message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! üç∞ –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
            reply_markup=menu_keyboard
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º asyncio
async def main():
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())